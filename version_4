
# Install libraries

install.packages('dbplyr')
install.packages('data.table')
install.packages('gtools')
install.packages('DescTools')
install.packages('tidyverse')
install.packages('stringr')


# 1. Load libraries -----------------------------------------------------------

library(dbplyr);
library(data.table); 
library(gtools); 
library(DescTools);
library(tidyverse)
library(stringr)


# 2. Read in data -------------------------------------------------------------

PrevEst_SMI <- fread("Prep_bootstrap_R_input.csv")



#PrevEst5_17 <- fread("Prev_ConditionSpecific_Age_Gender.csv")

#PopEst5_17 <-  fread("ONS_pop_2019_age_5_17_2021_boundaries.csv")

# 3. Check the data ------------------------------------------------------------

glimpse(PrevEst_SMI) # Check variable, variable name + variable type
summary(PrevEst_SMI) # Check numeric variables min and max values
unique(PrevEst_SMI$loCI_wilson%) # Check unique contents of every variable
sum(is.na(PrevEst_SMI)) # no NAs
sum(PrevEst_SMI == "") # no empty character cells


#glimpse(PrevEst5_17) # Check variable, variable name + variable type
#summary(PrevEst5_17) # Check numeric variables min and max values
#unique(PrevEst5_17$CI_U) # Check unique contents of every variable
#sum(is.na(PrevEst5_17)) # no NAs
#sum(PrevEst5_17 == "")# no empty character cells

summary(PrevEst_SMI)

#summary(PrevEst5_17)
#summary(PopEst5_17)


# Convert percentages to proportions 
PrevEst_SMI$cprd_prev <- PrevEst_SMI$cprd_prev/100
PrevEst_SMI$loCI_wilson <- PrevEst_SMI$loCI_wilson/100 
PrevEst_SMI$hiCI_wilson <- PrevEst_SMI$hiCI_wilson/100


#PrevEst5_17$Prevalence_proportion <- PrevEst5_17$Prevalence_proportion/100
#PrevEst5_17$CI_L <- PrevEst5_17$CI_L/100 
#PrevEst5_17$CI_U <- PrevEst5_17$CI_U/100

# 4. Add age band column to ONS Pop data frame ---------------------------------

#PopEst5_17$Age_Category <- cut(PopEst5_17$Age, c(5, 10, 16, 17), c("5-10", "11-16", "17"), include.lowest=TRUE)


# 5. Combine COrnwall and Isles and Scilly, label as Cornwall 

# Change IoS code to Cornwall code 
#PopEst5_17$OfficialCode[PopEst5_17$OfficialCode == "E06000053"] <- "E06000052"

# Change IoS name to Cornwall name 
#PopEst5_17$GeoName[PopEst5_17$GeoName == "Isles of Scilly"] <- "Cornwall"


# 6. Combine Hackney and City of London, label as Hackney -------------------------

# Change CoL code to Hackney code
#PopEst5_17$OfficialCode[PopEst5_17$OfficialCode == "E09000001"] <- "E09000012"

# Change CoL name to Hackney name 
#PopEst5_17$GeoName[PopEst5_17$GeoName == "City of London"] <- "Hackney"


# 5. Aggregate ONS pop by age category -----------------------------------------

#PopEst5_17 <- PopEst5_17 %>% 
#  group_by(GeoName, OfficialCode, Sex, Age_Category) %>%
#  summarize(Age_cat_pop = sum(Population))

# 6. Calculate prevalence built from male/female and persons separately ---------------

#PrevPop2019 <- left_join(PrevEst5_17,
#                         PopEst5_17,
#                         by = c("Age" = "Age_Category", "Sex" = "Sex"))

#PrevPop2019 <-
#  PrevPop2019 %>%
#  mutate(
#    Local_count = (Prevalence_proportion*Age_cat_pop))

#PrevPop2019_mf <-
#  PrevPop2019 %>% 
#  group_by(OfficialCode, Condition, Sex) %>%
#  summarize(Local_pop_5_17 = sum(Age_cat_pop),
#            Local_count_5_17 = sum(Local_count)) %>% 
#  mutate (Local_prev_5_17 = Local_count_5_17/Local_pop_5_17)

#PrevPop2019_p <-
#  PrevPop2019 %>% 
#  group_by(OfficialCode, Condition) %>%
#  summarize(Sex = 4, Local_pop_5_17 = sum(Age_cat_pop),
#            Local_count_5_17 = sum(Local_count)) %>% 
#  mutate (Local_prev_5_17 = Local_count_5_17/Local_pop_5_17)


#PrevPop2019_mfp <- rbind(PrevPop2019_mf,PrevPop2019_p)


#################################################################################################.
# SIMULATING CONFIDENCE INTERVALS 
#################################################################################################.


# 7. Convert proportions to log-odds and get SE 

PrevEst_SMI$logit_Pi <- logit(PrevEst_SMI$cprd_prev)
PrevEst_SMI$logit_ci_lower <- logit(PrevEst_SMI$loCI_wilson)
PrevEst_SMI$logit_ci_upper <- logit(PrevEst_SMI$hiCI_wilson)               
PrevEst_SMI$logit_Pi_se <- (PrevEst_SMI$logit_ci_upper - PrevEst_SMI$logit_ci_lower)/(2*1.96)                                    


#PrevEst5_17$logit_Pi <- logit(PrevEst5_17$Prevalence_proportion)
#PrevEst5_17$logit_ci_lower <- logit(PrevEst5_17$CI_L)
#PrevEst5_17$logit_ci_upper <- logit(PrevEst5_17$CI_U )               
#PrevEst5_17$logit_Pi_se <- (PrevEst5_17$logit_ci_upper-PrevEst5_17$logit_ci_lower)/(2*1.96)                                    

# 8. Get headings for simulated results

SimCI_df <-
  PrevPop2019_mfp %>%
  group_by(OfficialCode, Condition) %>%
  distinct(OfficialCode) %>%
  arrange(OfficialCode)

SimCI_df$Headings <-
  paste(SimCI_df$OfficialCode,SimCI_df$Condition)

Headings_vector <-
  pull(SimCI_df,Headings)

ncol <- length(Headings_vector)

# CREATE MATRIX TO STORE SIMULATED RESULTS#

#Persons

Simulation_results_table_p <- matrix(NA, nrow = 0, ncol = ncol)

Simulation_results_table_m <- matrix(NA, nrow = 0, ncol = ncol)

Simulation_results_table_f <- matrix(NA, nrow = 0, ncol = ncol)

colnames(Simulation_results_table_p) <- Headings_vector

colnames(Simulation_results_table_m) <- Headings_vector

colnames(Simulation_results_table_f) <- Headings_vector





# 9. Take bootstrap samples 

set.seed(2)
Number_iterations <- c(1:100) 


# LOOP STARTS HERE 
for (i in 1:length(Number_iterations)) {         
  
  PrevEst5_17 <- 
    PrevEst5_17 %>% 
    mutate(logit_Pi_sim = rnorm(1,logit_Pi,logit_Pi_se)) 
  
  PrevEst5_17 <- 
    PrevEst5_17 %>%   
    mutate(Pi_sim = exp(logit_Pi_sim)/(1+exp(logit_Pi_sim)))
  
  GEO_DEM_POP_PREV <-
    left_join(PrevEst5_17, PopEst5_17, by = c("Sex"="Sex","Age"="Age_Category"))
  
  # CALCULATE SIMULATED PREVALENCE COUNT BY OFFICIAL CODE, CONDITION, AGE CATEGORY AND GENDER #
  
  GEO_DEM_POP_PREV <- GEO_DEM_POP_PREV %>%
    mutate(L_count = Age_cat_pop * Pi_sim)
  
  # GROUP PERSONS BY OFFICIAL CODE #
  
  by_OfficialCode_p <-
    group_by(GEO_DEM_POP_PREV,OfficialCode, Condition)
  
  # AGGREGATED SIMULATED PERSONS COUNT, POP AND PREV BY OFFICIAL CODE #
  
  Prev_Count_OfficialCode_p <- 
    summarize(by_OfficialCode_p, Sex=4, Local_count = sum(L_count), Local_pop = sum(Age_cat_pop), Local_prev = Local_count/Local_pop)
  
  # GROUP MALE  BY OFFICIAL CODE #
  
  by_OfficialCode_m <-
    group_by(GEO_DEM_POP_PREV,OfficialCode, Condition) %>%
    filter (Sex == 1) 
  
  # AGGREGATED SIMULATED MALE COUNT, POP AND PREV BY OFFICIAL CODE #
  
  Prev_Count_OfficialCode_m <- 
    summarize(by_OfficialCode_m, Sex=1, Local_count = sum(L_count), Local_pop = sum(Age_cat_pop), Local_prev = Local_count/Local_pop)
  
  # GROUP FEMALE  BY OFFICIAL CODE #
  
  by_OfficialCode_f <-
    group_by(GEO_DEM_POP_PREV,OfficialCode, Condition) %>%
    filter (Sex == 2) 
  
  # AGGREGATED SIMULATED FEMALE COUNT, POP AND PREV BY OFFICIAL CODE #
  
  Prev_Count_OfficialCode_f <- 
    summarize(by_OfficialCode_f, Sex=2, Local_count = sum(L_count), Local_pop = sum(Age_cat_pop), Local_prev = Local_count/Local_pop)
  
  #####################
  
  # MALE
  
  # EXTRACT COUNT ONLY #
  
  Prev_Count_OfficialCode_reduced_m <-
    pull(Prev_Count_OfficialCode_m,Local_count)
  
  # TRANSPOSE THE VECTOR #
  
  Prev_Count_OfficialCode_reduced_m.t <- t(Prev_Count_OfficialCode_reduced_m) 
  
  # ADDING TO RESULTS TABLE #
  
  building_results_table <- rbind(Simulation_results_table_m,Prev_Count_OfficialCode_reduced_m.t)
  
  Simulation_results_table_m <- building_results_table
  
  # FEMALE
  
  # EXTRACT COUNT ONLY #
  
  Prev_Count_OfficialCode_reduced_f <-
    pull(Prev_Count_OfficialCode_f,Local_count)
  
  # TRANSPOSE THE VECTOR #
  
  Prev_Count_OfficialCode_reduced_f.t <- t(Prev_Count_OfficialCode_reduced_f) 
  
  # ADDING TO RESULTS TABLE #
  
  building_results_table <- rbind(Simulation_results_table_f,Prev_Count_OfficialCode_reduced_f.t)
  
  Simulation_results_table_f <- building_results_table
  
  # PERSONS
  
  # EXTRACT COUNT ONLY #
  
  Prev_Count_OfficialCode_reduced_p <-
    pull(Prev_Count_OfficialCode_p,Local_count)
  
  # TRANSPOSE THE VECTOR #
  
  Prev_Count_OfficialCode_reduced_p.t <- t(Prev_Count_OfficialCode_reduced_p) 
  
  # ADDING TO RESULTS TABLE #
  
  building_results_table <- rbind(Simulation_results_table_p,Prev_Count_OfficialCode_reduced_p.t)
  
  Simulation_results_table_p <- building_results_table
  
}

rownames(Simulation_results_table_m) <- Number_iterations  

rownames(Simulation_results_table_f) <- Number_iterations  

rownames(Simulation_results_table_p) <- Number_iterations  




# GETTING NTH VALUES #

# MALE

CI_Table.95_m <- matrix(NA,nrow=0, ncol=2)
CI_probs <- c(0.025,0.50, 0.975)

for (i in 1:length(Headings_vector)) {
  Heading_column_vector <- Simulation_results_table_m[,i]
  Heading_column_vector.S <- sort(Heading_column_vector)
  CI_Lower_Upper <- quantile(Heading_column_vector.S, CI_probs)
  Building_CI_Table <- rbind(CI_Table.95_m, CI_Lower_Upper)
  CI_Table.95_m <- Building_CI_Table
}

# FEMALE

CI_Table.95_f <- matrix(NA,nrow=0, ncol=2)
CI_probs <- c(0.025, 0.975)

for (i in 1:length(Headings_vector)) {
  Heading_column_vector <- Simulation_results_table_f[,i]
  Heading_column_vector.S <- sort(Heading_column_vector)
  CI_Lower_Upper <- quantile(Heading_column_vector.S, CI_probs)
  Building_CI_Table <- rbind(CI_Table.95_f, CI_Lower_Upper)
  CI_Table.95_f <- Building_CI_Table
}

# PERSONS

CI_Table.95_p <- matrix(NA,nrow=0, ncol=2)
CI_probs <- c(0.025, 0.975)

for (i in 1:length(Headings_vector)) {
  Heading_column_vector <- Simulation_results_table_p[,i]
  Heading_column_vector.S <- sort(Heading_column_vector)
  CI_Lower_Upper <- quantile(Heading_column_vector.S, CI_probs)
  Building_CI_Table <- rbind(CI_Table.95_p, CI_Lower_Upper)
  CI_Table.95_p <- Building_CI_Table
}

rownames(CI_Table.95_m) <- Headings_vector

rownames(CI_Table.95_f) <- Headings_vector

rownames(CI_Table.95_p) <- Headings_vector



# MALE

CI_Table.95.dt_m <- data.table(CI_Table.95_m,keep.rownames = TRUE) %>%
  setnames(old=c("rn","2.5%","97.5%"), new=c("OfficialCode_Condition","ci_count_lower","ci_count_upper"))

CI_Table.95.SPLIT_m <-
  str_split_fixed(CI_Table.95.dt_m$OfficialCode_Condition, " ", 2)

CI_Table.95.dt_m <- cbind(CI_Table.95.dt_m,CI_Table.95.SPLIT_m) %>%
  rename(
    OfficialCode = V1,
    Condition = V2)

CI_Table.95.dt_m$Sex <- 1

# FEMALE

CI_Table.95.dt_f <- data.table(CI_Table.95_f,keep.rownames = TRUE) %>%
  setnames(old=c("rn","2.5%","97.5%"), new=c("OfficialCode_Condition","ci_count_lower","ci_count_upper"))

CI_Table.95.SPLIT_f <-
  str_split_fixed(CI_Table.95.dt_f$OfficialCode_Condition, " ", 2)

CI_Table.95.dt_f <- cbind(CI_Table.95.dt_f,CI_Table.95.SPLIT_f) %>%
  rename(
    OfficialCode = V1,
    Condition = V2)

CI_Table.95.dt_f$Sex <- 2

# PERSONS

CI_Table.95.dt_p <- data.table(CI_Table.95_p,keep.rownames = TRUE) %>%
  setnames(old=c("rn","2.5%","97.5%"), new=c("OfficialCode_Condition","ci_count_lower","ci_count_upper"))

CI_Table.95.SPLIT_p <-
  str_split_fixed(CI_Table.95.dt_p$OfficialCode_Condition, " ", 2)

CI_Table.95.dt_p <- cbind(CI_Table.95.dt_p,CI_Table.95.SPLIT_p) %>%
  rename(
    OfficialCode = V1,
    Condition = V2)

CI_Table.95.dt_p$Sex <- 4

# JOINING CI TABLES

CI_Table.95.dt <- rbind (CI_Table.95.dt_m,CI_Table.95.dt_f,CI_Table.95.dt_p)

str(CI_Table.95.dt)
# JOINING COUNT TO CIs # 

COUNTS_PROPS_CIs_OFFICIALCODE_CONDITION <- 
  left_join(PrevPop2019_mfp, CI_Table.95.dt, by = c("OfficialCode"="OfficialCode", "Condition"="Condition", "Sex"="Sex")) %>%
  mutate(ci_prev_lower = ci_count_lower / Local_pop_5_17, ci_prev_upper = ci_count_upper / Local_pop_5_17)


